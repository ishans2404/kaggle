{"metadata":{"kernelspec":{"display_name":"neural-pdf","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-12-16T17:54:17.587710Z","iopub.status.busy":"2024-12-16T17:54:17.587007Z","iopub.status.idle":"2024-12-16T17:54:17.916414Z","shell.execute_reply":"2024-12-16T17:54:17.915605Z","shell.execute_reply.started":"2024-12-16T17:54:17.587675Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_path = '/kaggle/input/titanic'\ntrain_csv = pd.read_csv(data_path + '/train.csv')\ndf = pd.DataFrame(train_csv)\ndf.head()","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:54:17.918295Z","iopub.status.busy":"2024-12-16T17:54:17.917916Z","iopub.status.idle":"2024-12-16T17:54:17.953643Z","shell.execute_reply":"2024-12-16T17:54:17.952633Z","shell.execute_reply.started":"2024-12-16T17:54:17.918266Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:54:17.954818Z","iopub.status.busy":"2024-12-16T17:54:17.954534Z","iopub.status.idle":"2024-12-16T17:54:17.980070Z","shell.execute_reply":"2024-12-16T17:54:17.979161Z","shell.execute_reply.started":"2024-12-16T17:54:17.954795Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:54:17.982366Z","iopub.status.busy":"2024-12-16T17:54:17.982083Z","iopub.status.idle":"2024-12-16T17:54:18.010160Z","shell.execute_reply":"2024-12-16T17:54:18.009227Z","shell.execute_reply.started":"2024-12-16T17:54:17.982338Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isnull().sum()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.drop(['Cabin', 'Name', 'Ticket', 'Embarked', 'SibSp', 'Parch'], axis=1)\ndf.info()","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:54:18.012162Z","iopub.status.busy":"2024-12-16T17:54:18.011530Z","iopub.status.idle":"2024-12-16T17:54:18.025138Z","shell.execute_reply":"2024-12-16T17:54:18.024113Z","shell.execute_reply.started":"2024-12-16T17:54:18.012120Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_ = df.dropna(axis=0, how='any')\ndf_.info()","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:54:18.027519Z","iopub.status.busy":"2024-12-16T17:54:18.026841Z","iopub.status.idle":"2024-12-16T17:54:18.040794Z","shell.execute_reply":"2024-12-16T17:54:18.039908Z","shell.execute_reply.started":"2024-12-16T17:54:18.027466Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Rows removed =', len(df) - len(df_))","metadata":{"execution":{"iopub.execute_input":"2024-12-16T17:55:33.062869Z","iopub.status.busy":"2024-12-16T17:55:33.062457Z","iopub.status.idle":"2024-12-16T17:55:33.068054Z","shell.execute_reply":"2024-12-16T17:55:33.067099Z","shell.execute_reply.started":"2024-12-16T17:55:33.062835Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_.head()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_['Sex'] = le.fit_transform(df_['Sex'])\ndf_.head()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = df_.drop(['Survived', 'PassengerId'], axis=1)\nX.head()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = X.values\nX","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y = df_['Survived'].values\ny","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\nX","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X.shape","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y.shape","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import tensorflow as tf\nprint(\"Num GPUs Available:\", len(tf.config.list_physical_devices('GPU')))\nprint(tf.__version__)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}